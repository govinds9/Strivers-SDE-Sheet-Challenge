class Solution {
public:
     int f(int i,vector<int>& coins, int amount,vector<vector<int>>&dp){
         if(amount==0)return 0;
         if(i==0){
             if(amount%coins[i]==0)return amount/coins[i];
             else return INT_MAX;
         }

        if(dp[i][amount]!=-1)return dp[i][amount];

        int ntake = f(i-1,coins,amount,dp);
        int take = INT_MAX;
        if(amount>=coins[i])take = f(i,coins,amount-coins[i],dp);
        take = take==INT_MAX?INT_MAX:1+take;

        return min(take,ntake);
     }
    int coinChange(vector<int>& coins, int amount) {
        if(amount == 0)return 0;
        int n = coins.size();
        vector<vector<int>>dp(n,vector<int>(amount+1,0));
        for(int i = 1;i<=amount;i++){
            if(i%coins[0]==0)dp[0][i]=i/coins[0];
            else dp[0][i]=INT_MAX;
        }
       for(int i =1; i<n; i++){
           for(int j = 1; j<=amount;j++){

               int ntake = dp[i-1][j];
             int take = INT_MAX;
        if(j>=coins[i])take = dp[i][j-coins[i]];
        take = take==INT_MAX?INT_MAX:1+take;

            dp[i][j]= min(take,ntake);

           }
       }
        

         return dp[n-1][amount]==INT_MAX?-1:dp[n-1][amount];
        
    }
};
