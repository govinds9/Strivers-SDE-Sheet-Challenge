
// code studio ---- Return Subsets Sum to K

void f(int i,int &sum,int k,int n,vector<int>&arr,vector<int>&ds,vector<vector<int>>&ans){
    if(i==n){
        if(sum==k)ans.push_back(ds);
        return ;
    }
      ds.push_back(arr[i]);
      sum+=arr[i];
    f(i+1,sum,k,n,arr,ds,ans);
    ds.pop_back();
    sum-=arr[i];
    f(i+1,sum,k,n,arr,ds,ans);
}

vector<vector<int>> findSubsetsThatSumToK(vector<int> &arr, int n, int k)
{
    // Write your code here.
    int sum = 0;
    vector<int> ds;
    vector<vector<int>>ans;
    f(0,sum,k,n,arr,ds,ans);
    return ans;

}



//leetcode 

void f(int ind,vector<int> &ds,vector<vector<int>> &ans,vector<int>& nums,int target){
     if(ind == nums.size()){
         if(target==0)ans.push_back(ds);
         return ;
     }
//pickk
     if(nums[ind]<=target){
         ds.push_back(nums[ind]);
         f(ind,ds,ans,nums,target-nums[ind]);
         ds.pop_back();
     }

     f(ind+1,ds,ans,nums,target);
       
    }
    vector<vector<int>> combinationSum(vector<int>& nums, int target) {
         vector<vector<int>> ans;
         
         vector<int> ds;
       
         f(0,ds,ans,nums,target);

         return ans;
    }




