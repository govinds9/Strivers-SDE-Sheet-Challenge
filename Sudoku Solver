// codestudio 

#include<bits/stdc++.h>
bool valid(int board[9][9],int row, int col, int c){
        for(int i =0;i<9;i++){
            if(board[row][i]==c)return false;
            if(board[i][col]==c)return false;
            if(board[3*(row/3)+i/3][3*(col/3)+i%3]==c)return false;
        }
        return true;
    }
bool f(int board[9][9],vector<pair<int,int>>&arr,int i){
        if(i==arr.size())return true;
        int row = arr[i].first;
        int col = arr[i].second;

        for(int c =1;c<=9;c++){
            if(valid(board,row,col,c)){
                board[row][col]=c;
                if(f(board,arr,i+1)==true)return true;
                else{
                    board[row][col]=0;
                }
            }
        }
        return false;

    }

bool isItSudoku(int matrix[9][9]) {
    // Write your code here.
    vector<pair<int,int>>arr;
        for(int i = 0; i<9; i++){
            for(int j = 0; j<9; j++){
                if(matrix[i][j]==0)arr.push_back({i,j});
            }
        }

        return f(matrix,arr,0);

}




// leetcode 
class Solution {
public:
    bool f(vector<vector<char>>& board,vector<pair<int,int>>&arr,int i){
        if(i==arr.size())return true;
        int row = arr[i].first;
        int col = arr[i].second;

        for(char c ='1';c<='9';c++){
            if(valid(board,row,col,c)){
                board[row][col]=c;
                if(f(board,arr,i+1)==true)return true;
                else{
                    board[row][col]='.';
                }
            }
        }
        return false;

    }
    bool valid(vector<vector<char>>& board,int row, int col, char c){
        for(int i =0;i<9;i++){
            if(board[row][i]==c)return false;
            if(board[i][col]==c)return false;
            if(board[3*(row/3)+i/3][3*(col/3)+i%3]==c)return false;
        }
        return true;
    }
    void solveSudoku(vector<vector<char>>& board) {
        vector<pair<int,int>>arr;
        for(int i = 0; i<board.size(); i++){
            for(int j = 0; j<board.size(); j++){
                if(board[i][j]=='.')arr.push_back({i,j});
            }
        }

        bool x = f(board,arr,0);
        return ;
    }
};
